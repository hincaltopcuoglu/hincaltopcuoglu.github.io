df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(df$freq[i])
}
calc1 <- prod(calc1)
calc2 = log(factorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
##' **define shannon entropy with n**
shannon_entropy <- function(x){
df = count(x)
n = length(x)
df$probs = df$freq / n
se<- -n *sum(df$probs * log(df$probs))
return(se)
}
shannon_entropy(discrete_normal_arr)
setwd("C:/Users/Hincal/Desktop/R Works")
knitr::spin(shannon_entropy.R)
setwd("C:/Users/Hincal/Desktop/My Github/hincaltopcuoglu.github.io")
knitr::spin(shannon_entropy.R)
knitr::spin("shannon_entropy.R")
##' **create random discrete variables and plot it**
discrete_normal_arr <- round(rnorm(150, 10, 1), 0)
hist(discrete_normal_arr, prob=TRUE, ylim=c(0,.06), breaks=10)
curve(dnorm(x, mean(discrete_normal_arr), sd(discrete_normal_arr)), add=TRUE, col="darkblue", lwd=2)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(df$freq[i])
}
calc1 <- prod(calc1)
calc2 = log(factorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
##' **define shannon entropy with n**
shannon_entropy <- function(x){
df = count(x)
n = length(x)
df$probs = df$freq / n
se<- -n *sum(df$probs * log(df$probs))
return(se)
}
shannon_entropy(discrete_normal_arr)
##' **create random discrete variables and plot it**
discrete_normal_arr <- round(rnorm(1500, 10, 1), 0)
hist(discrete_normal_arr, prob=TRUE, ylim=c(0,.06), breaks=10)
curve(dnorm(x, mean(discrete_normal_arr), sd(discrete_normal_arr)), add=TRUE, col="darkblue", lwd=2)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(df$freq[i])
}
calc1 <- prod(calc1)
calc2 = log(factorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
##' **define shannon entropy with n**
shannon_entropy <- function(x){
df = count(x)
n = length(x)
df$probs = df$freq / n
se<- -n *sum(df$probs * log(df$probs))
return(se)
}
shannon_entropy(discrete_normal_arr)
##' **create random discrete variables and plot it**
discrete_normal_arr <- round(rnorm(500, 10, 1), 0)
hist(discrete_normal_arr, prob=TRUE, ylim=c(0,.06), breaks=10)
curve(dnorm(x, mean(discrete_normal_arr), sd(discrete_normal_arr)), add=TRUE, col="darkblue", lwd=2)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(df$freq[i])
}
calc1 <- prod(calc1)
calc2 = log(factorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
##' **define shannon entropy with n**
shannon_entropy <- function(x){
df = count(x)
n = length(x)
df$probs = df$freq / n
se<- -n *sum(df$probs * log(df$probs))
return(se)
}
shannon_entropy(discrete_normal_arr)
##' **create random discrete variables and plot it**
discrete_normal_arr <- round(rnorm(10, 10, 1), 0)
hist(discrete_normal_arr, prob=TRUE, ylim=c(0,.06), breaks=10)
curve(dnorm(x, mean(discrete_normal_arr), sd(discrete_normal_arr)), add=TRUE, col="darkblue", lwd=2)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(df$freq[i])
}
calc1 <- prod(calc1)
calc2 = log(factorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
##' **define shannon entropy with n**
shannon_entropy <- function(x){
df = count(x)
n = length(x)
df$probs = df$freq / n
se<- -n *sum(df$probs * log(df$probs))
return(se)
}
shannon_entropy(discrete_normal_arr)
##' **create random discrete variables and plot it**
discrete_normal_arr <- round(rnorm(50, 10, 1), 0)
hist(discrete_normal_arr, prob=TRUE, ylim=c(0,.06), breaks=10)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(df$freq[i])
}
calc1 <- prod(calc1)
calc2 = log(factorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
##' **define shannon entropy with n**
shannon_entropy <- function(x){
df = count(x)
n = length(x)
df$probs = df$freq / n
se<- -n *sum(df$probs * log(df$probs))
return(se)
}
shannon_entropy(discrete_normal_arr)
df
factorial(df$freq)
prod(factorial(df$freq))
log(factorial(50) / prod(factorial(df$freq)) )
##' **create random discrete variables and plot it**
discrete_normal_arr <- round(rnorm(100, 10, 1), 0)
hist(discrete_normal_arr, prob=TRUE, ylim=c(0,.06), breaks=10)
curve(dnorm(x, mean(discrete_normal_arr), sd(discrete_normal_arr)), add=TRUE, col="darkblue", lwd=2)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(df$freq[i])
}
calc1 <- prod(calc1)
calc2 = log(factorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
##' **define shannon entropy with n**
shannon_entropy <- function(x){
df = count(x)
n = length(x)
df$probs = df$freq / n
se<- -n *sum(df$probs * log(df$probs))
return(se)
}
shannon_entropy(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(df$freq[i])
}
calc1 <- prod(calc1)
calc2 <-log(factorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
##' **create random discrete variables and plot it**
discrete_normal_arr <- round(rnorm(1000, 5, 1), 0)
mult_coeff_shannon(discrete_normal_arr)
##' **create random discrete variables and plot it**
discrete_normal_arr <- round(rnorm(300, 5, 1), 0)
hist(discrete_normal_arr, prob=TRUE, ylim=c(0,.06), breaks=10)
curve(dnorm(x, mean(discrete_normal_arr), sd(discrete_normal_arr)), add=TRUE, col="darkblue", lwd=2)
mult_coeff_shannon(discrete_normal_arr)
shannon_entropy(discrete_normal_arr)
##' **create random discrete variables and plot it**
discrete_normal_arr <- round(rnorm(180, 5, 1), 0)
mult_coeff_shannon(discrete_normal_arr)
##' **create random discrete variables and plot it**
discrete_normal_arr <- round(rnorm(150, 5, 1), 0)
mult_coeff_shannon(discrete_normal_arr)
shannon_entropy(discrete_normal_arr)
##' **create random discrete variables and plot it**
discrete_normal_arr <- rnorm(150, 5, 1)
hist(discrete_normal_arr, prob=TRUE, ylim=c(0,.06), breaks=10)
curve(dnorm(x, mean(discrete_normal_arr), sd(discrete_normal_arr)), add=TRUE, col="darkblue", lwd=2)
mult_coeff_shannon(discrete_normal_arr)
shannon_entropy(discrete_normal_arr)
##' **create random discrete variables and plot it**
discrete_normal_arr <- rnorm(1500, 5, 1)
mult_coeff_shannon(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(log(df$freq[i]))
}
calc1 <- prod(calc1)
calc2 <-log(factorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
##' **create random discrete variables and plot it**
discrete_normal_arr <- round(rnorm(1500, 5, 1), 0)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(log(df$freq[i]))
}
calc1 <- prod(calc1)
calc2 <-log(factorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- log(factorial(df$freq[i]))
}
#calc1 <- prod(calc1)
#calc2 <-log(factorial(n)/ calc1)
return(calc1)
}
mult_coeff_shannon(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(log(df$freq[i]))
}
#calc1 <- prod(calc1)
#calc2 <-log(factorial(n)/ calc1)
return(calc1)
}
mult_coeff_shannon(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(log(df$freq[i]))
}
calc1 <- prod(calc1)
#calc2 <-log(factorial(n)/ calc1)
return(calc1)
}
mult_coeff_shannon(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(log(df$freq[i]))
}
calc1 <- prod(calc1)
calc2 <-log(factorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(log(df$freq[i]))
}
calc1 <- prod(calc1)
calc2 <-log(factorial(n)/ 10^calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(log(df$freq[i]))
}
calc1 <- prod(calc1)
calc2 <-log(factorial(n)/ 2^calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(log(df$freq[i]))
}
calc1 <- prod(calc1)
calc2 <-(factorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(log(df$freq[i]))
}
calc1 <- prod(calc1)
#calc2 <-(factorial(n)/ calc1)
return(calc1)
}
mult_coeff_shannon(discrete_normal_arr)
factorial(1500)
factorial(log(1500))
factorial(log(1500)) / 8.880298e+12
10^1.07396e-09
2^1.07396e-09
log(1.07396e-09)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(log(df$freq[i]))
}
calc1 <- prod(calc1)
#calc2 <-(factorial(n)/ calc1)
return(calc1)
}
mult_coeff_shannon(discrete_normal_arr)
10^8.880298e+12
2^8.880298e+12
shannon_entropy(discrete_normal_arr)
10^-20.65191
10 ^ 2.228897e-21
lfactorial(1500)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(df$freq[i])
}
calc1 <- prod(calc1)
calc2 <-(lfactorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(df$freq[i])
}
calc1 <- prod(calc1)
calc2 <-log(lfactorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(df$freq[i])
}
calc1 <- prod(calc1)
#calc2 <-log(lfactorial(n)/ calc1)
return(calc1)
}
mult_coeff_shannon(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- lfactorial(df$freq[i])
}
calc1 <- prod(calc1)
#calc2 <-log(lfactorial(n)/ calc1)
return(calc1)
}
mult_coeff_shannon(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(df$freq[i])
}
#calc1 <- prod(calc1)
#calc2 <-log(lfactorial(n)/ calc1)
return(calc1)
}
mult_coeff_shannon(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- lfactorial(df$freq[i])
}
#calc1 <- prod(calc1)
#calc2 <-log(lfactorial(n)/ calc1)
return(calc1)
}
mult_coeff_shannon(discrete_normal_arr)
se <- mult_coeff_shannon(discrete_normal_arr)
se
prod(se)
prod(se[2:])
se[2]
se[2:]
se[2,]
se[2,:]
se[2,3,4,5]
se[2:]
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- factorial(df$freq[i])
}
#calc1 <- prod(calc1)
#calc2 <-log(lfactorial(n)/ calc1)
return(calc1)
}
mult_coeff_shannon(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- lfactorial(df$freq[i])
}
#calc1 <- prod(calc1)
#calc2 <-log(lfactorial(n)/ calc1)
return(calc1)
}
mult_coeff_shannon(discrete_normal_arr)
se[2:5]
se[2:9]
se[2:8]
prod(se[2:8])
log(lfactorial(1500) / prod(se[2:8]))
shannon_entropy(discrete_normal_arr)
##' **create random discrete variables and plot it**
discrete_normal_arr <- round(rnorm(150, 5, 1), 0)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- log(factorial(df$freq[i]))
}
calc1 <- prod(calc1)
calc2 <-log(factorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
shannon_entropy(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- log(lfactorial(df$freq[i]))
}
calc1 <- prod(calc1)
calc2 <-log(lfactorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
mult_coeff_shannon <- function(x){
df = count(x)
n = length(x)
calc1 = 1
for (i in 1:nrow(df)){
calc1[i] <- log(factorial(df$freq[i]))
}
calc1 <- prod(calc1)
calc2 <-log(lfactorial(n)/ calc1)
return(calc2)
}
mult_coeff_shannon(discrete_normal_arr)
